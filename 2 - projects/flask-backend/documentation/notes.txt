0. Do the installs
    > pip install flask
    > pip install flask-login
    > pip install flask-sqlalchemy

1. Do the boilerplate
    > Make the project structure 
    > Make the setup.py

        from setuptools import setup, find_packages

        setup(
            name='website',
            version='0.1',
            packages=find_packages()
        )

    > pip install -e .
    > (if the interpreter of VSC is wrong -> [ctrl + shift + p] -> [python select interpreter] -> select the right interpreter )

2. Create the first __init__.py en main.py file
    > create an function that instanciates the flask app in the __init__.py
    > set the secret (perhaps from a configfile)
    > import and run that function in main.py, and set the __name__ == __main__: app.run

3. Set the blueprints in the views.py and the auth.py file
    > from flask import Blueprint
    > Blueprint makes sure that you dont have to set all routes in one file, you can spread them (such as over views.py and auth.py)
    > also do this in the auth.py file!

4. Register the blueprints in the __init__.py file
    > different than working without blueprints, you now need to register them
    > make sure their names are different in the seperate files
    > note that you might set an url_prefix

5. Set the first routes and their functions
    > '/', '/login', '/logout', '/signup'

6. Setup the first .html files in templates
    > base.html
    > home.html
        > {% extends 'base.html' %}
        > {% block content %} {% endblock %}
        > {{ variable }}
    > login.html, signup.html
    > use render_template('home.html', variable=value) function to use the html.
    > use the {{ url_for(auth.login) }} in the html files
    > use the {% if a==b %} {% elif %} {% else %} {% endif %}

7. Make the signup-page, and login-page.
    > Make a FORM, with the method="POST"!
    > Note that everything (the h3, label, input, div and button) go within the form!
    > The form contains <divs> with <label>,<input> combinations.
    > The form ends with a button:
        > <button type="submit"> Register </button>
    > Make the signup-page IN THE auth-views accept a POST-request

    <form method="POST">
        <h3> This is a form </h3>
        <div> 
            <label for="email">Email Adress</label>
            <input 
                type="email"
                class="" 
                id="email" 
                name="email" 
                placeholder="Email"
            />
        </div>
        <div>
            <label for="firstname">Firstname</label>
            <input 
                type="text"
                class=""  
                id="firstname" 
                name="firstname" 
                placeholder="Firstname"
            />
        </div>
        <button type="submit"> Register </button>
    </form>

8. Handling of the requests.
    > Data can be catched by the request.form object.
    > Individual items can be catched by request.form.get('variable')
        > Please note that the input name='' variable (in the html form) is carried.
    > We can write simple comparisons, and validations. In an if-else.

9. Flask flash messages.
    > from flask import flash
    > flash('message', category='error/success')
    > display them on your page!
    
    {% with messages = get_flashed_messages(with_categories=true) %} 
        {% if messages %}
            {% for category, message in messages %}
                {% if category == 'error' %}
                    <div role="alert"> 
                        {{ message }}
                        <button type="button" data-dismiss="alert">
                    </div>
                {% endif %}
            {% endfor %}
        {% endif %}
    {% endwith %}

    > Suggestively make one place where these appear in the base.html

10. Connecting a database: Add the database to the __init__.py
    > from flask_sqlalchemy import SQLAlchemy
    > db = SQLAlchemy()
    > DB_NAME = 'database.db'
    > app.config['SQLALCHEMY_DATABASE_URI'] = f'sqlte:///{DB_NAME}'
    > db.init_app(app)
        > please note that we need to import the models (of the next step) before running the init!

11. Create models.py (for users, and notes)
    > Notes will be more plain than users, because for Flask to use their login_module, we want user to inherit from a flask UserMixin object.
        > See later the current_user object!

    > Imports
        > from package import db (the thing you created in the __init__.py)
        > from flask_login import UserMixin
        > (for the date from sqlalchemy.sql import func -> func.now())

    > Vervolgens maak je in principe classes that inherit from db.Model
        > class Notes(db.Model):
            id = db.Column(db.Integer, primary_key=True)
            ...
            ...

    > Voor de relaties:
        > user_id = db.Column(db.Integer, db.Foreignkey('user.id'))
        > notes = db.relationship('Note')

12. Create the tables in the __init__.py from the models you created
    from website.models import User, Note

    with app.app_context():
        if not path.exists('webpack/' + DB_NAME): <WERKT NOG NIET GOED!>
            db.create_all()
            print('Created Database!')

13. In the auth.py make a User object with the catched variables from the form-post, and save it to the database.
    > new_user = website.models.User(var=var)
    > db.session.add(new_user)
    > db.session.commit()

    > Install plugin: SQLite Viewer (Florian Klampfer)

    13B.
    > Make sure the password is saved hashed
    > from werkzeug.security import generate_password_hash, check_password_hash
    > use this when creating new_user

    13C. Alternative: If you want to go hardcore via plain SQL:
    > See for a raw SQL example: https://stackoverflow.com/questions/62568478/how-to-set-sqlalchemy-database-uri
    > https://stackoverflow.com/questions/64785905/why-is-check-password-hash-function-returning-false-using-flask-sqlite3-and-we

14. Redirect and render the next page, with a flash message.
    > Should be clear now



15. Build the login, that checks the incomming data against the database, and logs the user in with the flask_login module
    > from flask_login import login_user, login_required, logout_user, current_user
    > user = User.query.filter_by(email=login_email).first()
    > login_user(user, remember=True)
    > Zie de remember=True, blijft je onthouden tot je uitlogt.


15b. For the login module to work, you need a #Login Manager in the __init__.py
    > i.e. we need to tell flask how to login our user

16. Implement Logout_user() 

17. Add the different scenarios to the login/signup/account page based on login:
    > if current_user.is_authenticated:
    > elif not current_user.is_authenticated:
    > @login_required

18. Send along the current_user.is_authenticated with the responses: 
    > You can use the data in the templates
    > Firstname: {{ current_user.firstname }}

19. Make the navbar conditional.

20. Check developer-tools for the cookies that are used!