*** Section 9: Flexbox ***
*** 54 Flex ***

- Old school html-tables, only use for true tables (not for styling!).
    <table>
        <tr class="row">
            <td class="col1"> </td>
            <td class="col2"> </td>
            <td class="col3"> </td>
        </tr>
    </table>
    > Thereafter, people started to use display + positioning (a hammer)
    > Then, float + hacks to create complex layouts. Today, only for images and text.
    > Today, Flexbox (or grid, or bootstrap)

- Wrap all in a container, and set display to flex.

- Please note that display: flex; is a different system than 
the traditional block, inline, block-inline.

- When wrapped with a flexbox container, all default display values will be ignored!
    > e.g. the <p> has a default display: block;

- display: flex (defaults to 100% width, acts like a block)
> display: inline-flex (note that the container becomes stubborn to growing! Even if the items would want to!)

- gap/row-gap/column-gap: Acts as a sort of margin around boxes
    > So if you think you see margin, but it seems not to be applied. Check if you are looking at a flexbox!


*** 55 Flex direction ***
flex-direction: row;
flex-direction: column;

Note that there is a: 
    > main axis, and a 
    > cross axis;

flex-basis: 100px -> Expand the cards over the main axis  
    > (thus the effect is different for row/column direction)
    > Please note that this can have a similar effect as width/heigth (although different effects under different settings!)

cool tric:
    .flex-container > * {
      flex-basis: 100px;
    }

cool shortcut:
    CTRL + K + U = outcomment toggle

*** 56 Flex Layout ***
> Remember to apply the flex property correctly to the PARENT or the CHILD.

PARENT properties:

display: flex/inline-flex

flex-wrap: nowrap; -> just continues on the same line (even out of sight if no space)
flex-wrap: wrap; -> continues elements on the next line (remaining the full min-width of the elements)
    > PARENT to change behaviour when you run out of width.

justify-content (along the MAIN axis): 
    > PARENT distribution of the content across the main-axis.
    > flex-start, flex-end, center (without space between!), space-between, space-around, space-evenly

align-items (along the CROSS axis):
    > PARENT
    > Only works with flex-warp: NO-WRAP
    > Only works within the container (so make sure the container has a heigth!)

align-content (along the CROSS axis):
    > PARENT
    > Only works with flex-wrap: WRAP
    > Only works within the container (so make sure the container has a heigth!)

CHILD properties:
order: 0;
order: 1; 
    > CHILD to change the order of the items in the container.

align-self:
    > CHILD takes one child out of the normal align, and do its own thing.

flex-basis:
    > CHLID Works on the main-axis (i.e. take into account the flex-direction!)
    > If there is white space between the items in the flexbox, flex-basis can increase the size of items.
    > There is a min and max to the effect of flex-basis:
        > If flex-basis value is smaller than the items (items' content), than it does NOT make the items smaller.
        > If no white-space left in the flex-direction = row, than it also cannot increase items. 
            > Note that in flex-direction: column, there is endless space.
            > The effect is most visible when looking at row responsively

        > Might be a way to fully fill the width.


*** Viewport/vh
> viewport height 
    > 100vh (the heigth of the screen)
    > 70vh (takes 70% of the screen)

Play flexbox froggy a few times!
https://appbrewery.github.io/flexboxfroggy/

*** 57 Flex Sizing ***
If you had a website with paragraphs (which have default margins, padding and full width),
if you put them in a flexbox, this all will be ignored. They are transformed to a 
flex-items.
    > flex-items also have particular behaviour. E.g. responsive to width changes.

Priority for flex-items for size
    > min-width/max-width (automatically default set by content) > flex-basis > width > width of the content
    > if you set width and flex-basis, the first will be completely ignored.
    > Please note that if you set a width/flex-basis, as soon as there is NOT enough space IT WILL SHRIK NEVERTHELESS!
        > The smallest shink will be to the longst word within the button.
        > If you want a minimum/maximum that is bigger, use min-width (aka it will not shrink beyond) and max-width (aka it will not grow beyond!).

    > flex-basis and max-width/min-width CAN be combined!
        > Please note that with setting min-width it does not respond anymore.

> flex-basis: ;
> flex-grow: 100px -> default size
> flex-grow: 1 -> it is allowed to grow. (i.e. it will stretch)
> flex-shrink: 1 -> it is allow to shrink (up to its minimum-width, that might be automatically set.)
> flex: 1 1 0; grow shrink basis.
> flex 1 == flex 1 1 0; Shorthand option!


> mind that flex-basis is by default on auto, which gives larger content large width. 
    > set it to 0, if you want to have equal flex-items.


