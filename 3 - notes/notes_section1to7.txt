*** Section 3: Void tags ***
- Tags <p> </p> and self-closing "void" tags <img />, <br />
- Specific and global attributes

*** Section 4: Paths, <a> and <img> ***
- Absolute and relative paths
    > "./directory/map1/me.png"
    > <a href=""> <img src="" /> </a>

*** Section 5: CSS inline, internal and external ***
- CSS there to style, but also to seperate the clutter in the html code for organisation
- Inline: 1 element: <p style="background: blue"> </p>, normally added to a single element, but normally not recommended.
- Internal: 1 page: <style> p {background: blue} </style>, interesting to apply to one-pagers, however you'd normally have more pages, thus ...
- External: 1 website: Having your css in an external file.

styles.css
<link rel="stylesheet" href="./syles.css"/>

selector {
    property: value;
}

element-selector/class-selector/id-selector/attribute-selector/*-selector
> please note that an id-selector should only be applied ONCE in a single html document!
> while the class might be attributed to as many elements as you'd want 

h1 {
    color: blue;
} 

.red-heading {
    color: red;
}

#main {
    color: green;
}

p[withattribute] {
    color: orange;
}

p[attribute="value"] {
    color: pink;
}

* {
    background: black;
}

<h2 class="red-heading">Haedertext</h2>

*** Section 6: Styling ***
*** 6.1/6.2

A. colors:
hex and names
https://colorhunt.co/

B. Font-size
- px, pt, em, rem 
- 1px is approx 0.26 mm (i.e. 4px is about 1mm)
- 1pt is approx 0.35 mm (i.e. 3pt is about 1mm)

- em is relative to the parent element
- rem is relative to the ROOT (most of the times the html tag)

- Instructor advices to use rem.

C. Font-weigth
- light to bold
- is on the background along the range of 100-900
- lighter (-100)
- bolder (+100)

D. Font-family
- Serif and sans-serif (without), note that there are generic backups 
for whenever there's something that goes wrong.
- https://fonts.google.com/
- 

*** 6.3
- Developer tools
- To inspect websites, to see what they used/do.

- Note that there is a button to find elements in a page at the left-top of the developers tools.
- Note that in the Element -> Styles pages, some lines are stripedthrough. These are overruled by another css line somewhere!
- If you go to the Element -> Computed tab, you can see what is truely applied to a certain element.
- (...) -> More tools -> CSS overview for an overview

*** 6.4 The box model:
- Note that the width and heigth are set on the element itself. In addition you should add the padding, border and margin to know the full with of the whole box.
- In the developertools you can see the box!
- Please note that if you see margin on the page, but it seems not to be set, it might be FLEXBOX GAP (gap/ow-gap/column-gap)!
- The same for width/height and flexbox-basis!

*** 6.5 Centering stuff:
- "Centering elements in css is a whole science on itself"
- One trick to do it simple in a simple scenarioS: If you want to center (mirrored) stuff:
    1. Make a div.
    2. Set the div's width to a percentage (lets say 50%).
    3. Divide the remainer by 2 (i.e. 25%) and put that as margin left.
    4. Set the width of the thing (e.g. image) that is in de div to 100%.

*** Section 7: Intermediate CSS ***
*** 7.1 the CASCADING style stylesheet
- When multiple css rules are targeting the same element (with a conflicting/different) stylerule. What happens?
- Which one is higher up at the hierarchy? Which will get applied? Which is more important?

- 4 rules: 
    - Note that the bottom one is most imporant!

    1. Position:
                 lower > higher 
                 
                 i.e. the lower written in the script, the last/lower will be displayed. As if you'd always overwrite.

    2. Specificity: how specific is a selector? 
                element (e.g. h1 {})
                < class
                < element[withattribute]
                < id 

                i.e. id is most specific of these, and therefore applied.

        An ID should always only target ONE element!

    3. Type (type > specificity)
                external
                < internal
                < inline

                i.e. inline over the others!
                note that this actually is also from specific to generic right?

    4. Important helper
        color: green !important;
        The important helper overrules always everything

    NOTE THAT THIS IS THE BOTTOM OF THE CASCASE, AND THUS IS MOST IMPORTANT!
        
- Note that you can combine multiple classes to an element when you add a space in between!
    <h1 class="a-class b-class"> Hello </h1>
    - Note that the order in the css-file determines which one is applied. (i.e. NOT the order in the element itself!)

*** 7.2: combining several selectors ***

- We can combine selectors to target more specific things:
    - a, b {} -> select both a and b
    - a > b {} -> select any b's that are a direct child of a 
    - a b {} -> select all b's that are a child of a, at any level!
    - li.done {} -> select li's that ALSO have a class of done
    - ul p.done {} -> select all p's that are a child of ul's, and have a class of done.

*** 7.3: Basic CSS positioning ***
- Position: Static;
- Static, relative, absolute, fixed
    > Static: Default value, where it should be according to the standard html. (note that you dont not have to apply per se)
    > Relative: Is relative TO ITS DEFAULT static position, where it should be (i.e. not to some specific other element!)
    > Absolute: Absolute Relative to its NEASREST POSITIONED (i.e. with the position property set) ancestor. E.g. when a div is within a div.
        > Please note if none of the ancestors have a position, then it is to the corner of the PAGE!
        > Plaase note that it thus needs a positioned ancestor to work!
    > Fixed: Fixed to the top-left of the BROWSER. 
        > and thus that is is independent of scroling.
- Z-index -> What goes on top of what?
    > The z-index determines what goes on top of what on the z-axis.
    > z-index = 1, z-index = -1 (default = 0)
    > 

Notes:
- Please note that all values apply to the TOPLEFT corner of the thing you are positioning!
- Please note that PERCENTAGES are typically set against the PARENT element!
- Let op! Je kunt beter denken in elementen die op elkaar liggen, dan alle blokjes los van elkaar zien.
    > bv. bij de vlag zijn er 'twee balken van rood', maar dat is 'een rood blok dat achter het blauwe ligt'.
    > note that div.flag > div, could sometimes also be .flag div {}
- often the parent has a position: relative; and the child the position: absolute; 
    > remember that in order for the latter to work you need to have the parent set!
- http://lascarid.es/fussyflags/